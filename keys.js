// trie = (string ∪ null, map char trie)
function find_entry(trie, input, output) {
  for (const c of input)
    trie = trie[1][c];
  return trie[0];
}
function add_entry(trie, input, output) {
  for (const c of input) {
    if (c in trie[1])
      trie = trie[1][c];
    else {
      trie[1][c] = [null, {}];
      trie = trie[1][c];
    }
  }
  trie[0] = output;
}
function empty_trie() { return [null, {}]; }
function init_trie(trie) {
  // Greek letters
  add_entry(trie, "\\a", "α");
  add_entry(trie, "\\b", "β");
  add_entry(trie, "\\G", "Γ");
  add_entry(trie, "\\g", "γ");
  add_entry(trie, "\\D", "Δ");
  add_entry(trie, "\\d", "δ");
  add_entry(trie, "\\e", "ε");
  add_entry(trie, "\\z", "ζ");
  add_entry(trie, "\\eta", "η");
  add_entry(trie, "\\Th", "Θ");
  add_entry(trie, "\\th", "θ");
  add_entry(trie, "\\i", "ι");
  add_entry(trie, "\\k", "κ");
  add_entry(trie, "\\L", "Λ");
  add_entry(trie, "\\l", "λ");
  add_entry(trie, "\\m", "μ");
  add_entry(trie, "\\n", "ν");
  add_entry(trie, "\\Xi", "Ξ");
  add_entry(trie, "\\xi", "ξ");
  add_entry(trie, "\\P", "Π");
  add_entry(trie, "\\p", "π");
  add_entry(trie, "\\r", "ρ");
  add_entry(trie, "\\S", "Σ");
  add_entry(trie, "\\s", "σ");
  add_entry(trie, "\\t", "τ");
  add_entry(trie, "\\u", "υ");
  add_entry(trie, "\\Ph", "Φ");
  add_entry(trie, "\\F", "Φ");
  add_entry(trie, "\\ph", "φ");
  add_entry(trie, "\\f", "φ");
  add_entry(trie, "\\chi", "χ");
  add_entry(trie, "\\Psi", "Ψ");
  add_entry(trie, "\\psi", "ψ");
  add_entry(trie, "\\Omega", "Ω");
  add_entry(trie, "\\omega", "ω");
  add_entry(trie, "\\w", "ω");
  add_entry(trie, "\\W", "Ω");
  // Superscript letters
  add_entry(trie, "^a", "ᵃ");
  add_entry(trie, "^b", "ᵇ");
  add_entry(trie, "^c", "ᶜ");
  add_entry(trie, "^d", "ᵈ");
  add_entry(trie, "^e", "ᵉ");
  add_entry(trie, "^f", "ᶠ");
  add_entry(trie, "^g", "ᵍ");
  add_entry(trie, "^h", "ʰ");
  add_entry(trie, "^i", "ⁱ");
  add_entry(trie, "^j", "ʲ");
  add_entry(trie, "^k", "ᵏ");
  add_entry(trie, "^l", "ˡ");
  add_entry(trie, "^m", "ᵐ");
  add_entry(trie, "^n", "ⁿ");
  add_entry(trie, "^o", "ᵒ");
  add_entry(trie, "^p", "ᵖ");
  add_entry(trie, "^r", "ʳ");
  add_entry(trie, "^s", "ˢ");
  add_entry(trie, "^t", "ᵗ");
  add_entry(trie, "^u", "ᵘ");
  add_entry(trie, "^v", "ᵛ");
  add_entry(trie, "^w", "ʷ");
  add_entry(trie, "^x", "ˣ");
  add_entry(trie, "^y", "ʸ");
  add_entry(trie, "^z", "ᶻ");
  // Superscript capital letters
  add_entry(trie, "^A", "ᴬ");
  add_entry(trie, "^B", "ᴮ");
  add_entry(trie, "^D", "ᴰ");
  add_entry(trie, "^E", "ᴱ");
  add_entry(trie, "^G", "ᴳ");
  add_entry(trie, "^H", "ᴴ");
  add_entry(trie, "^I", "ᴵ");
  add_entry(trie, "^J", "ᴶ");
  add_entry(trie, "^K", "ᴷ");
  add_entry(trie, "^L", "ᴸ");
  add_entry(trie, "^M", "ᴹ");
  add_entry(trie, "^N", "ᴺ");
  add_entry(trie, "^O", "ᴼ");
  add_entry(trie, "^P", "ᴾ");
  add_entry(trie, "^R", "ᴿ");
  add_entry(trie, "^T", "ᵀ");
  add_entry(trie, "^U", "ᵁ");
  add_entry(trie, "^V", "ⱽ");
  add_entry(trie, "^W", "ᵂ");
  // Superscript numbers
  add_entry(trie, "^0", "⁰");
  add_entry(trie, "^1", "¹");
  add_entry(trie, "^2", "²");
  add_entry(trie, "^3", "³");
  add_entry(trie, "^4", "⁴");
  add_entry(trie, "^5", "⁵");
  add_entry(trie, "^6", "⁶");
  add_entry(trie, "^7", "⁷");
  add_entry(trie, "^8", "⁸");
  add_entry(trie, "^9", "⁹");
  // Superscript symbols
  add_entry(trie, "^-", "⁻");
  add_entry(trie, "^+", "⁺");
  add_entry(trie, "^=", "⁼");
  add_entry(trie, "^(", "⁽");
  add_entry(trie, "^)", "⁾");
  // Subscript letters
  add_entry(trie, "_a", "ₐ");
  add_entry(trie, "_h", "ₕ");
  add_entry(trie, "_i", "ᵢ");
  add_entry(trie, "_j", "ⱼ");
  add_entry(trie, "_k", "ₖ");
  add_entry(trie, "_l", "ₗ");
  add_entry(trie, "_m", "ₘ");
  add_entry(trie, "_n", "ₙ");
  add_entry(trie, "_o", "ₒ");
  add_entry(trie, "_p", "ₚ");
  add_entry(trie, "_r", "ᵣ");
  add_entry(trie, "_s", "ₛ");
  add_entry(trie, "_t", "ₜ");
  add_entry(trie, "_u", "ᵤ");
  add_entry(trie, "_v", "ᵥ");
  add_entry(trie, "_x", "ₓ");
  // Subscript numbers
  add_entry(trie, "_0", "₀");
  add_entry(trie, "_1", "₁");
  add_entry(trie, "_2", "₂");
  add_entry(trie, "_3", "₃");
  add_entry(trie, "_4", "₄");
  add_entry(trie, "_5", "₅");
  add_entry(trie, "_6", "₆");
  add_entry(trie, "_7", "₇");
  add_entry(trie, "_8", "₈");
  add_entry(trie, "_9", "₉");
  // Blackboard letters and numbers
  add_entry(trie, "\\bA", "𝔸");
  add_entry(trie, "\\ba", "𝕒");
  add_entry(trie, "\\bB", "𝔹");
  add_entry(trie, "\\bb", "𝕓");
  add_entry(trie, "\\bC", "ℂ");
  add_entry(trie, "\\bc", "𝕔");
  add_entry(trie, "\\bD", "𝔻");
  add_entry(trie, "\\bd", "𝕕");
  add_entry(trie, "\\bE", "𝔼");
  add_entry(trie, "\\be", "𝕖");
  add_entry(trie, "\\bF", "𝔽");
  add_entry(trie, "\\bf", "𝕗");
  add_entry(trie, "\\bG", "𝔾");
  add_entry(trie, "\\bg", "𝕘");
  add_entry(trie, "\\bH", "ℍ");
  add_entry(trie, "\\bh", "𝕙");
  add_entry(trie, "\\bI", "𝕀");
  add_entry(trie, "\\bi", "𝕚");
  add_entry(trie, "\\bJ", "𝕁");
  add_entry(trie, "\\bj", "𝕛");
  add_entry(trie, "\\bK", "𝕂");
  add_entry(trie, "\\bk", "𝕜");
  add_entry(trie, "\\bL", "𝕃");
  add_entry(trie, "\\bl", "𝕝");
  add_entry(trie, "\\bM", "𝕄");
  add_entry(trie, "\\bm", "𝕞");
  add_entry(trie, "\\bN", "ℕ");
  add_entry(trie, "\\bn", "𝕟");
  add_entry(trie, "\\bO", "𝕆");
  add_entry(trie, "\\bo", "𝕠");
  add_entry(trie, "\\bP", "ℙ");
  add_entry(trie, "\\bp", "𝕡");
  add_entry(trie, "\\bQ", "ℚ");
  add_entry(trie, "\\bq", "𝕢");
  add_entry(trie, "\\bR", "ℝ");
  add_entry(trie, "\\br", "𝕣");
  add_entry(trie, "\\bS", "𝕊");
  add_entry(trie, "\\bs", "𝕤");
  add_entry(trie, "\\bT", "𝕋");
  add_entry(trie, "\\bt", "𝕥");
  add_entry(trie, "\\bU", "𝕌");
  add_entry(trie, "\\bu", "𝕦");
  add_entry(trie, "\\bV", "𝕍");
  add_entry(trie, "\\bv", "𝕧");
  add_entry(trie, "\\bW", "𝕎");
  add_entry(trie, "\\bw", "𝕨");
  add_entry(trie, "\\bX", "𝕏");
  add_entry(trie, "\\bx", "𝕩");
  add_entry(trie, "\\bY", "𝕐");
  add_entry(trie, "\\by", "𝕪");
  add_entry(trie, "\\bZ", "ℤ");
  add_entry(trie, "\\bz", "𝕫");
  add_entry(trie, "\\bGamma", "ℾ");
  add_entry(trie, "\\bgamma", "ℽ");
  add_entry(trie, "\\bPi", "ℿ");
  add_entry(trie, "\\bpi", "ℼ");
  add_entry(trie, "\\bSigma", "⅀");
  add_entry(trie, "\\b0", "𝟘");
  add_entry(trie, "\\b1", "𝟙");
  add_entry(trie, "\\b2", "𝟚");
  add_entry(trie, "\\b3", "𝟛");
  add_entry(trie, "\\b4", "𝟜");
  add_entry(trie, "\\b5", "𝟝");
  add_entry(trie, "\\b6", "𝟞");
  add_entry(trie, "\\b7", "𝟟");
  add_entry(trie, "\\b8", "𝟠");
  add_entry(trie, "\\b9", "𝟡");
  // Calligraphic uppercase letters
  add_entry(trie, "\\cA", "𝓐");
  add_entry(trie, "\\cB", "𝓑");
  add_entry(trie, "\\cC", "𝓒");
  add_entry(trie, "\\cD", "𝓓");
  add_entry(trie, "\\cE", "𝓔");
  add_entry(trie, "\\cF", "𝓕");
  add_entry(trie, "\\cG", "𝓖");
  add_entry(trie, "\\cH", "𝓗");
  add_entry(trie, "\\cI", "𝓘");
  add_entry(trie, "\\cJ", "𝓙");
  add_entry(trie, "\\cK", "𝓚");
  add_entry(trie, "\\cL", "𝓛");
  add_entry(trie, "\\cM", "𝓜");
  add_entry(trie, "\\cN", "𝓝");
  add_entry(trie, "\\cO", "𝓞");
  add_entry(trie, "\\cP", "𝓟");
  add_entry(trie, "\\cQ", "𝓠");
  add_entry(trie, "\\cR", "𝓡");
  add_entry(trie, "\\cS", "𝓢");
  add_entry(trie, "\\cT", "𝓣");
  add_entry(trie, "\\cU", "𝓤");
  add_entry(trie, "\\cV", "𝓥");
  add_entry(trie, "\\cW", "𝓦");
  add_entry(trie, "\\cX", "𝓧");
  add_entry(trie, "\\cY", "𝓨");
  add_entry(trie, "\\cZ", "𝓩");
  // Calligraphic lowercase letters
  add_entry(trie, "\\ca", "𝓪");
  add_entry(trie, "\\cb", "𝓫");
  add_entry(trie, "\\cc", "𝓬");
  add_entry(trie, "\\cd", "𝓭");
  add_entry(trie, "\\ce", "𝓮");
  add_entry(trie, "\\cf", "𝓯");
  add_entry(trie, "\\cg", "𝓰");
  add_entry(trie, "\\ch", "𝓱");
  add_entry(trie, "\\ci", "𝓲");
  add_entry(trie, "\\cj", "𝓳");
  add_entry(trie, "\\ck", "𝓴");
  add_entry(trie, "\\cl", "𝓵");
  add_entry(trie, "\\cm", "𝓶");
  add_entry(trie, "\\cn", "𝓷");
  add_entry(trie, "\\co", "𝓸");
  add_entry(trie, "\\cp", "𝓹");
  add_entry(trie, "\\cq", "𝓺");
  add_entry(trie, "\\cr", "𝓻");
  add_entry(trie, "\\cs", "𝓼");
  add_entry(trie, "\\ct", "𝓽");
  add_entry(trie, "\\cu", "𝓾");
  add_entry(trie, "\\cv", "𝓿");
  add_entry(trie, "\\cw", "𝔀");
  add_entry(trie, "\\cx", "𝔁");
  add_entry(trie, "\\cy", "𝔂");
  add_entry(trie, "\\cz", "𝔃");
  // Script uppercase letters
  add_entry(trie, "\\sA", "𝒜");
  add_entry(trie, "\\sC", "𝒞");
  add_entry(trie, "\\sD", "𝒟");
  add_entry(trie, "\\sG", "𝒢");
  add_entry(trie, "\\sJ", "𝒥");
  add_entry(trie, "\\sK", "𝒦");
  add_entry(trie, "\\sN", "𝒩");
  add_entry(trie, "\\sO", "𝒪");
  add_entry(trie, "\\sP", "𝒫");
  add_entry(trie, "\\sQ", "𝒬");
  add_entry(trie, "\\sS", "𝒮");
  add_entry(trie, "\\sT", "𝒯");
  add_entry(trie, "\\sU", "𝒰");
  add_entry(trie, "\\sV", "𝒱");
  add_entry(trie, "\\sW", "𝒲");
  add_entry(trie, "\\sX", "𝒳");
  add_entry(trie, "\\sY", "𝒴");
  add_entry(trie, "\\sZ", "𝒵");
  // Script lowercase letters
  add_entry(trie, "\\sa", "𝒶");
  add_entry(trie, "\\sb", "𝒷");
  add_entry(trie, "\\sc", "𝒸");
  add_entry(trie, "\\sd", "𝒹");
  add_entry(trie, "\\sf", "𝒻");
  add_entry(trie, "\\sh", "𝒽");
  add_entry(trie, "\\si", "𝒾");
  add_entry(trie, "\\sj", "𝒿");
  add_entry(trie, "\\sk", "𝓀");
  add_entry(trie, "\\sl", "𝓁");
  add_entry(trie, "\\sm", "𝓂");
  add_entry(trie, "\\sn", "𝓃");
  add_entry(trie, "\\sp", "𝓅");
  add_entry(trie, "\\sq", "𝓆");
  add_entry(trie, "\\sr", "𝓇");
  add_entry(trie, "\\ss", "𝓈");
  add_entry(trie, "\\st", "𝓉");
  add_entry(trie, "\\su", "𝓊");
  add_entry(trie, "\\sv", "𝓋");
  add_entry(trie, "\\sw", "𝓌");
  add_entry(trie, "\\sx", "𝓍");
  add_entry(trie, "\\sy", "𝓎");
  add_entry(trie, "\\sz", "𝓏");
  // Other letters
  add_entry(trie, "\\el", "ℓ");
  // Brackets
  add_entry(trie, "[[", "⟦");
  add_entry(trie, "]]", "⟧");
  add_entry(trie, "\\<", "⟨");
  add_entry(trie, "\\>", "⟩");
  // Arrows
  add_entry(trie, "\\to", "→");
  add_entry(trie, "->", "→");
  add_entry(trie, "<-", "←");
  add_entry(trie, "\\To", "⇒");
  add_entry(trie, "=>", "⇒");
  add_entry(trie, "\\multimap", "⊸");
  add_entry(trie, "-o", "⊸");
  add_entry(trie, "vdash", "⊢");
  add_entry(trie, "dashv", "⊣");
  add_entry(trie, "|-", "⊢");
  add_entry(trie, "-|", "⊣");
  add_entry(trie, "|=", "⊨");
  add_entry(trie, "|3=", "⫢");
  add_entry(trie, "mapsto", "↦");
  add_entry(trie, "rightharpoonup", "⇀");
  add_entry(trie, "-\\", "⇀");
  add_entry(trie, "<->", "◂—▸");
  add_entry(trie, "-->", "——▸");
  add_entry(trie, "<--", "◂——");
  add_entry(trie, "==>", "══▷");
  add_entry(trie, "<=>", "◁═▷");
  add_entry(trie, "<==", "◁══");
  add_entry(trie, "=>>", "═»");
  // Products
  add_entry(trie, "otimes", "⊗");
  add_entry(trie, "\\xo", "⊗");
  add_entry(trie, "oplus", "⊕");
  add_entry(trie, "\\x", "×");
  add_entry(trie, "uplus", "⨄");
  // Logic
  add_entry(trie, "\\and", "⋀");
  add_entry(trie, "/\\", "⋀");
  add_entry(trie, "\\or", "⋁");
  add_entry(trie, "\\/", "⋁");
  add_entry(trie, "forall", "∀");
  add_entry(trie, "\\exists", "∃");
  add_entry(trie, "\\ex", "∃");
  add_entry(trie, "\\square", "□");
  add_entry(trie, "\\box", "□");
  add_entry(trie, "qed", "◼");
  add_entry(trie, "\\later", "▷");
  add_entry(trie, "triangleright", "▷");
  add_entry(trie, "|>", "▷");
  add_entry(trie, "<|", "◁");
  add_entry(trie, "3=", "≡");
  add_entry(trie, "!=", "≠");
  add_entry(trie, "\\par", "⅋");
  add_entry(trie, "<=", "≤");
  add_entry(trie, ">=", "≥");
  add_entry(trie, "_|_", "⟂");
  add_entry(trie, "\\top", "⊤");
  add_entry(trie, "\\*", "∗");
  // Set theory
  add_entry(trie, "\\cup", "∪");
  add_entry(trie, "\\cap", "∩");
  add_entry(trie, "\\in", "∈");
  add_entry(trie, "(-", "∈");
  add_entry(trie, "notin", "∉");
  add_entry(trie, "\\subset", "⊆");
  add_entry(trie, "(_", "⊆");
  add_entry(trie, "_)", "⊇");
  add_entry(trie, "emptyset", "∅");
  // Lattice theory
  add_entry(trie, "#_", "⊑");
  add_entry(trie, "|_|", "⊔");
  // Misc. symbols
  add_entry(trie, "::", "∷");
  add_entry(trie, "Downa", "⇓");
  add_entry(trie, "downa", "↓");
  add_entry(trie, "\\o", "∘");
  add_entry(trie, "\\circ", "∘");
  add_entry(trie, "|`", "⌜");
  add_entry(trie, "`|", "⌝");
  add_entry(trie, "\\inv", "⁻¹");
}
